print("Hello R ~~!!!")
print("Hello R ~~!!!")
print("Hello R ~~!!!")
install.packages("tidyverse")
library(tidyverse)
list(speed = c(lapply(cars, mean)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]),
dist = c(lapply(cars, mean)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]]))
list(speed = c(lapply(cars, mean)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]),
dist = c(lapply(cars, mean)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]]))
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]] - lapply(cars, min)[[1]]),
dist = c(lapply(cars, mean)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]]))
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]] - lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]] - lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]] - lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))[1]
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]] - lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))[[1]]
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]] - lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
factor(col1, col2)
# DF1 <- data.frame(factor(a = col1, b= col2, c = col))
df = data.frame(col1)
max.num <- min(length(col1), length(col2), length(col3))
df <- cbind(df , col2 = col2[1:max.num])
df <- cbind(df , col3 = col3[1:max.num])
df
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
factor(col1, col2)
# DF1 <- data.frame(factor(a = col1, b= col2, c = col))
df = data.frame(col1)
max.num <- min(length(col1), length(col2), length(col3))
df <- cbind(df , col2 = col2[1:max.num])
df <- cbind(df , col3 = col3[1:max.num])
df
df <- cbind(df , col2 = col2[1:max.num])
max.num <- min(length(col1), length(col2), length(col3))
df <- cbind(df , col2 = col2[1:max.num])
df <- cbind(df , col3 = col3[1:max.num])
df
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
factor(col1, col2)
# DF1 <- data.frame(factor(a = col1, b= col2, c = col))
df = data.frame(col1)
# DF1 <- data.frame(factor(a = col1, b= col2, c = col))
df = data.frame(col1)
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
df = data.frame(col1)
max.num <- min(length(col1), length(col2), length(col3))
df <- cbind(df , col2 = col2[1:max.num])
df <- cbind(df , col3 = col3[1:max.num])
df
source('C:/Users/uskaw/Desktop/한림대/소융대 2학년 1학기/데이터사이언스기초_윤지희/2일차/실습.R', echo=TRUE)
source('C:/Users/uskaw/Desktop/한림대/소융대 2학년 1학기/데이터사이언스기초_윤지희/2일차/실습.R', echo=TRUE)
str(df)
View(df)
View(df)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
df = data.frame(col1)
max.num <- min(length(col1), length(col2), length(col3)) # 각 요소중 가장 작은 요소를 추출한다.
df <- cbind(df , col2 = col2[1:max.num])
df <- cbind(df , col3 = col3[1:max.num])
df
df = data.frame(col1, col2[1:max.num], col3 = col3[1:max.num]) # 먼저 데이터 프레임을 만든다.
df
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
max.num <- min(length(col1), length(col2), length(col3)) # 각 요소중 가장 작은 요소의 길이를 가져온다.
df = data.frame(col1, col2[1:max.num], col3 = col3[1:max.num]) # 먼저 데이터 프레임을 만든다.
df
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
max.num <- min(length(col1), length(col2), length(col3)) # 각 요소중 가장 작은 요소의 길이를 가져온다.
df = data.frame(col = col1, col2 = col2[1:max.num], col3 = col3[1:max.num]) # 먼저 데이터 프레임을 만든다.
df
View(df)
max.num <- min(length(col1), length(col2), length(col3)) # 각 요소중 가장 작은 요소의 길이를 가져온다.
df = data.frame(col = col1[1:max.num], col2 = col2[1:max.num], col3 = col3[1:max.num]) # 그후 가작 작은 요소만큼.
df
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
max.num <- min(length(col1), length(col2), length(col3)) # 각 요소중 가장 작은 요소의 길이를 가져온다.
df = data.frame(col = col1[1:max.num], col2 = col2[1:max.num], col3 = col3[1:max.num]) # 그후 가작 작은 요소만큼.
df
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
max.num <- min(length(col1), length(col2), length(col3)) # 각 요소중 가장 작은 요소의 길이를 가져온다.
df = data.frame(col = col1[1:max.num], col2 = col2[1:max.num], col3 = col3[1:max.num]) # 각 벡터의 첫번째 요소부터 구해둔 요소까지 슬리이싱하여 데이터 프레임을 만든다.
df
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
max.num <- min(length(col1), length(col2), length(col3)) # 각 요소중 가장 작은 요소의 길이를 가져온다.
df = data.frame(col = col1[1:max.num], col2 = col2[1:max.num], col3 = col3[1:max.num]) # 각 벡터의 첫번째 요소부터 구해둔 요소까지 슬리이싱하여 데이터 프레임을 만든다.
df
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
col3 <- c(col3, c(as.logical(round(mean(col3)))))
col1 <- c(col1, round(mean(col1)))
# col1
data.frame(col1, col2, col3)
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
col3 <- c(col3, c(as.logical(round(mean(col3))))) # 논리 값의 평균을 구하고 반올림한다.
#평균은 0~1의 사이의 부동 소수점이 구해지므로 반올림을 통해 True가 가장 많이 나왔으면 True로 false가 가장많이 나왔으면 False로 치환할 것이다.
col1 <- c(col1, round(mean(col1)))
# col1
data.frame(col1, col2, col3)
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
col3 <- c(col3, c(as.logical(round(mean(col3))))) # 논리 값의 평균을 구하고 반올림한다.
#평균은 0~1의 사이의 부동 소수점이 구해지므로 반올림을 통해 True가 가장 많이 나왔으면 True로 false가 가장많이 나왔으면 False로 치환할 것이다.
col1 <- c(col1, round(mean(col1))) # col1은 단순 번호로 보이지만, 판단할 수 없으므로 정수형의 평균을 구하도록 하였다.
data.frame(col1, col2, col3) # 문제 없이 데이터를 만들 수가 있다.
list(speed = c(lapply(cars, mean)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]),
dist = c(lapply(cars, mean)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]]))
list(speed = c(lapply(cars, mean)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]),
dist = c(lapply(cars, mean)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]]))
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]-lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
list(speed = lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]-lapply(cars, min)[[1]],
dist = lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]])
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]-lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]-lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]-lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
# 코드가 굉장히 더럽고 속도가 느린 코딩이지만 주어진 조건에 최대한 맞추었다.
# 함수를 이용하다면 조금은 길어져도 가독성을 개선시킬 수가 있을 것이다.
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]-lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]-lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], lapply(cars, max)[[1]]-lapply(cars, min)[[1]]),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
max(cars)
max
carws
cars
max(cars$speed)
max(cars$speed) - min(car$speed)
max(car$speed) - min(car$speed)
max(cars$speed) - min(cars$speed)
list(speed = c(lapply(cars, max)[[1]], lapply(cars, min)[[1]], max(cars$speed) - min(cars$speed)),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
list(speed = c(max(cars$speed), min(cars$speed), max(cars$speed) - min(cars$speed)),
dist = c(lapply(cars, max)[[2]], lapply(cars, min)[[2]], lapply(cars, max)[[2]] - lapply(cars, min)[[2]]))
cars$speed %>% max
cars$speed %/% max
cars$speed %>% max
library(dplyr)
cars$speed %>% max
col1 <- c(1,2,3,4)
col2 <- c("M","F","M","M","F")
col3 <- c(TRUE, FALSE, TRUE, FALSE)
col3 <- c(col3, as.logical(round(mean(col3)))) # 논리 값의 평균을 구하고 반올림한다.
#평균은 0~1의 사이의 부동 소수점이 구해지므로 반올림을 통해 True가 가장 많이 나왔으면 True로 false가 가장많이 나왔으면 False로 치환할 것이다.
col1 <- c(col1, round(mean(col1))) # col1은 단순 번호로 보이지만, 판단할 수 없으므로 정수형의 평균을 구하도록 하였다.
data.frame(col1, col2, col3) # 문제 없이 데이터를 만들 수가 있다.
plot(cars)
library(plotly)
install.packages("plotly")
library(plotly)
df = read.csv("feeds (4).csv")
df = read.csv("feeds (4).csv")
df = read.csv("feeds (4).csv")
df = read.csv("feeds (4).csv")
df = read.csv("C:\Users\uskaw\R프로그래밍 실습\feeds (4).csv")
df = read.csv("C:/Users/uskaw/R프로그래밍 실습/feeds (4).csv")
df$created_at <- as.POSIXct(df$created_at)
fig <- plot_ly(df, x = ~created_at, y = ~opening_door, type = 'scatter', mode = 'lines')
fig
df$created_at <- as.POSIXct(df$created_at)
fig <- plot_ly(df, x = ~created_at, y = ~opening_door, type = 'scatter', mode = 'lines')
fig
fig <- plot_ly(df, x = ~created_at, y = ~field1, type = 'scatter', mode = 'lines')
fig
vec1 <- c(10, 20, 30)
lapply(X = vec1, FUN = function(value){
reutrn_value <- NULL
if(value == 10){
return_value <- "인사부"
}else{
return_value <- "총무부"
}
}) %>% unlist()
lapply(X = vec1, FUN = function(value){
reutrn_value <- NULL
if(value == 10){
return_value <- "인사부"
}else{
return_value <- "총무부"
}
})
lapply(X = vec1, FUN = function(value){
reutrn_value <- NULL
if(value == 10){
return_value <- "인사부"
}else{
return_value <- "총무부"
}
}) %>%unlist()
lapply(X = vec1, FUN = function(value){
reutrn_value <- NULL
if(value == 10){
return_value <- "인사부"
}else{
return_value <- "총무부"
}
}) %>%unlist()
lapply(X = vec1, FUN = function(value){
reutrn_value <- NULL
if(value == 10){
return_value <- "인사부"
}else{
return_value <- "총무부"
}
}) %>% unlist()
lapply(X = vec1, FUN = function(value){
reutrn_value <- NULL
if(value == 10){
return_value <- "인사부"
}else{
return_value <- "총무부"
}
}) %>% unlist()
lapply(X = vec1, FUN = function(value){
return_value <- NULL
if(value == 10){
return_value <- "?씤?궗遺"
} else{
return_value <- "珥앸Т遺"
}
}) %>% unlist()
# ifelse
vec1 <- c(10,20,30)
vec1_v2 <- ifelse(vec1 == 10, "?씤?궗遺", "珥앸Т遺")
vec1_v2
class(vec1_v2)
## 以묐났 ?궗?슜 媛?뒫
vec1_v3 <- ifelse(vec1 == 10, "?씤?궗遺",
ifelse(vec1 == 20, "?옱臾대?", "珥앸Т遺"))
vec1_v3
# lapply or sapply
lapply(X = vec1, FUN = function(value){
return_value <- NULL
if(value == 10){
return_value <- "?씤?궗遺"
} else{
return_value <- "珥앸Т遺"
}
}) %>% unlist()
## ifelse瑜? ?뜲?씠?꽣 ?봽?젅?엫?뿉 ?쟻?슜!!
new <- ifelse(cars$speed >= 20, "寃곷굹 鍮좊쫫",
ifelse(cars$speed >= 10, "弛먭툑 鍮좊쫫", "?룊踰?.."))
# lapply or sapply
lapply(X = vec1, FUN = function(value){
return_value <- NULL
if(value == 10){
return_value <- "?씤?궗遺"
} else{
return_value <- "珥앸Т遺"
}
}) %>% unlist()
## ifelse瑜? ?뜲?씠?꽣 ?봽?젅?엫?뿉 ?쟻?슜!!
new <- ifelse(cars$speed >= 20, "寃곷굹 鍮좊쫫",
ifelse(cars$speed >= 10, "弛먭툑 鍮좊쫫", "?룊踰?.."))
getwd()
library(tidyverse) # tibble 을 가지고 있다.
getwd()
setwd("C:/Users/uskaw/R프로그래밍 실습/")
df <- read.csv("Pre_Season_Batter.csv", header = T,
stringsAsFactors = T)
df_2 <- df %>% group_by(team, batter_name) %>%
summarise(., G_AVG = mean(G),
HR_SUM = sum(HR), X3B_sum = sum(X3B),
X2B_sum = sum(X2B), H_sum = sum(H))
view(df_2)
df$X3B
df$X3B
df$X2B3B
df$X2
df$3B
df["3B"]
df["X3B"]
names(df)
